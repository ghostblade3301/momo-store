{"remainingRequest":"/home/gh/Devops/momo-store/frontend/node_modules/@vue/cli-plugin-typescript/node_modules/thread-loader/dist/cjs.js!/home/gh/Devops/momo-store/frontend/node_modules/babel-loader/lib/index.js!/home/gh/Devops/momo-store/frontend/node_modules/ts-loader/index.js??ref--14-3!/home/gh/Devops/momo-store/frontend/src/services/api.service.ts","dependencies":[{"path":"/home/gh/Devops/momo-store/frontend/src/services/api.service.ts","mtime":1720610520162},{"path":"/home/gh/Devops/momo-store/frontend/babel.config.js","mtime":1720610520158},{"path":"/home/gh/Devops/momo-store/frontend/node_modules/@vue/cli-plugin-typescript/node_modules/cache-loader/dist/cjs.js","mtime":1720610674487},{"path":"/home/gh/Devops/momo-store/frontend/node_modules/@vue/cli-plugin-typescript/node_modules/thread-loader/dist/cjs.js","mtime":1720610674455},{"path":"/home/gh/Devops/momo-store/frontend/node_modules/babel-loader/lib/index.js","mtime":1720610669087},{"path":"/home/gh/Devops/momo-store/frontend/node_modules/ts-loader/index.js","mtime":1720610659715}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/gh/Devops/momo-store/frontend/src/services/api.service.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,KAAP,MAA2C,OAA3C;AACA,SAAS,KAAT,QAAsB,QAAtB;AAEA,KAAK,CAAC,QAAN,CAAe,OAAf,GAAyB,OAAO,CAAC,GAAR,CAAY,eAArC;;IACM,U;;;;;;;;kFAIJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B,gBAAA,KAA1B,2DAAkC,IAAlC;AACQ,gBAAA,OADR,GACkB,KAAK,CAAC,QAAQ,CAAC,MAAV,CADvB;;AAAA,qBAGK,OAAO,CAAC,sBAAD,CAHZ;AAAA;AAAA;AAAA;;AAAA,iDAIW,OAAO,CAAC,sBAAD,CAJlB;;AAAA;AAAA,oBAOM,KAPN;AAAA;AAAA;AAAA;;AAAA,iDAOoB,OAAO,CAAC,MAAR,CAAe,qBAAf,CAPpB;;AAAA;AAAA;AAAA,uBASQ,KAAK,GAAL,CAAS,QAAT,CATR;;AAAA;AAAA,iDAWS,KAAK,YAAL,CAAkB,KAAlB,CAXT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;gFAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwB,gBAAA,KAAxB,8DAA0D,EAA1D;AAAA,+BACS,MADT;AAAA;AAAA,uBAEyB,KAAK,YAAL,EAFzB;;AAAA;AAAA;AAAA;AAEI,+BAFJ;AAAA;AAAA,+BAGK,KAHL;AAAA,+DACgB,MADhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAMA,aAAW,GAAX,EAAwB,MAAxB,EAAoC;AAClC,aAAO,KAAK,CAAC,GAAN,CAAU,GAAV,EAAe;AAAE,QAAA,MAAM,EAAN;AAAF,OAAf,EAA2B,IAA3B,CAAgC,UAAA,CAAC;AAAA,eAAI,CAAC,CAAC,IAAN;AAAA,OAAjC,CAAP;AACD;;;;0EAED,kBAAkB,GAAlB,EAA+B,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,+BACS,KADT;AAAA,+BACoB,GADpB;AAAA,+BACyB,IADzB;AAAA;AAAA,uBACgD,KAAK,UAAL,EADhD;;AAAA;AAAA;AAAA;AACiC,kBAAA,OADjC;AAAA;AAAA,+DACe,IADf,8DACqE,IADrE,CAC0E,UAAA,CAAC;AAAA,yBAAI,CAAC,CAAC,IAAN;AAAA,iBAD3E;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;yEAIA,kBAAiB,GAAjB,EAA8B,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,+BACS,KADT;AAAA,+BACmB,GADnB;AAAA,+BACwB,IADxB;AAAA;AAAA,uBAC+C,KAAK,UAAL,EAD/C;;AAAA;AAAA;AAAA;AACgC,kBAAA,OADhC;AAAA;AAAA,+DACe,GADf,8DACoE,IADpE,CACyE,UAAA,CAAC;AAAA,yBAAI,CAAC,CAAC,IAAN;AAAA,iBAD1E;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;6EAIA,kBAAoB,GAApB,EAAiC,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,+BACS,KADT;AAAA,+BACsB,GADtB;AAAA;AAAA,uBAC4C,KAAK,UAAL,EAD5C;;AAAA;AAAA;AAAA,+BAC+D,IAD/D;AAAA;AAC6B,kBAAA,OAD7B;AAC+D,kBAAA,IAD/D;AAAA;AAAA,+DACe,MADf,gDACuE,IADvE,CAC4E,UAAA,CAAC;AAAA,yBAAI,CAAC,CAAC,IAAN;AAAA,iBAD7E;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AAKF,eAAe,UAAf","sourcesContent":["import axios, { AxiosRequestHeaders } from 'axios';\nimport { parse } from 'cookie';\n\naxios.defaults.baseURL = process.env.VUE_APP_API_URL;\nclass ApiService {\n\n  static csrf_token: string;\n\n  static async getCsrfToken(fetch = true): Promise<string> {\n    const cookies = parse(document.cookie);\n\n    if(cookies['mock_store_csrftoken']) {\n      return cookies['mock_store_csrftoken'];\n    }\n\n    if(!fetch) return Promise.reject('No CSRF token found');\n\n    await this.get('/csrf/');\n\n    return this.getCsrfToken(false);\n  }\n\n  static async getHeaders(extra: {[name: string]: string} = {}): Promise<AxiosRequestHeaders> {\n    return Object.assign({\n      'X-CSRFTOKEN': await this.getCsrfToken(),\n    }, extra);\n  }\n\n  static get(url: string, params?: any) {\n    return axios.get(url, { params }).then(r => r.data);\n  }\n\n  static async post(url: string, data?: any) {\n    return axios.post(url, data, { headers: await this.getHeaders() }).then(r => r.data);\n  }\n\n  static async put(url: string, data?: any) {\n    return axios.put(url, data, { headers: await this.getHeaders() }).then(r => r.data);\n  }\n\n  static async delete(url: string, data?: any) {\n    return axios.delete(url, { headers: await this.getHeaders(), data }).then(r => r.data);\n  }\n}\n\nexport default ApiService;"],"sourceRoot":""}]}